/**   A driver that demonstrates the concrete Queue classes.   @author Frank M. Carrano   @author Timothy M. Henry   @version 4.1   UPDATED by C. Lee-Klawender*//*	CIS 22C 	HW #2	Name of Program: "QueueDriver"	Name of Programmer: Sehun Eric Oh	Date: 1/21/16	OS: Mac OS X El Capitan	Compiler: javac 	Description:	LinkedQueue implementation and tester	*Comments before methods, descriptions of variable names and what the represent*/import java.util.ArrayList;public class QueueDriver{	public static void main(String[] args)	{        ArrayList<String> list = new ArrayList<>();		LinkedQueue<String> lq = new LinkedQueue<>();		list.add("John");		list.add("Abe");		list.add("Barry");		list.add("Jill");		list.add("Nick");		list.add("Ron");		testQueueOperations(lq, list);		ArrayList<Integer> ints = new ArrayList<>();		LinkedQueue<Integer> lq_int = new LinkedQueue<>();		ints.add(1);		ints.add(2);		ints.add(4);		ints.add(8);		ints.add(16);		ints.add(32);		ints.add(64);		ints.add(128);		testQueueOperations(lq_int, ints);		extraQueueTester();	}  // end main	public static void extraQueueTester()	{		LinkedQueue<Double> doubQueue = new LinkedQueue<>();				doubQueue.enqueue(new Double(1.2));		doubQueue.enqueue(new Double(8.9));		System.out.println("\nTesting Double Queue: "+ doubQueue);		System.out.println("Testing dequeuing Double Queue: " + 					doubQueue.dequeue());		System.out.println("Testing dequeuing Double Queue: " + 					doubQueue.dequeue());		System.out.println("Double Queue's size is " + doubQueue.size());		System.out.println("Testing enqueuing Double Queue after emptying: " +				doubQueue.enqueue(new Double(3.4)) );		System.out.println("Double Queue now has: " + doubQueue);		System.out.println("Double Queue's size is " + doubQueue.size());	} // end extraQueueTester	public static <T> void testQueueOperations(QueueInterface<T> myQueue, ArrayList<T> list)	{		System.out.println("\n\nisEmpty() returns " + myQueue.isEmpty() + "\n");		// System.out.println("Add to queue to get\n" +		//                    "Joe Jess Jim Jill Jane Jerry\n");        // String [] strArray = {"Jim", "Jess", "Jill", "Jane", "Joe", "Jack"};		for( T item : list)		{            if(myQueue.enqueue(item))                System.out.println("Successfully added " + item);            else                System.out.println("UNABLE to enqueue " + item);		}		System.out.println("After enqueing, the queue has: " + myQueue.toString());		System.out.println("The Queue size = " + myQueue.size());		System.out.println("\nisEmpty() returns " + myQueue.isEmpty());		System.out.println("\nTesting getFront and dequeue:\n");		while (!myQueue.isEmpty())		{			T front = myQueue.peekFront();			System.out.println(front + " is at the front of the queue.");			front = myQueue.dequeue();			System.out.println(front + " is removed from the front of the queue.\n");		} // end while		System.out.print("\nThe queue should be empty: ");		System.out.println("isEmpty() returns " + myQueue.isEmpty() + "\n\n"); 		System.out.println("myQueue.getFront() returns " +  myQueue.peekFront());		System.out.println("myQueue.dequeue() returns " +  myQueue.dequeue() + "\n");		System.out.println("\nEnd of Queue Test\n");	} // end testQueueOperations}  // end Driver/* OUTPUTisEmpty() returns trueSuccessfully added JohnSuccessfully added AbeSuccessfully added BarrySuccessfully added JillSuccessfully added NickSuccessfully added RonAfter enqueing, the queue has: John Abe Barry Jill Nick RonThe Queue size = 6isEmpty() returns falseTesting getFront and dequeue:John is at the front of the queue.John is removed from the front of the queue.Abe is at the front of the queue.Abe is removed from the front of the queue.Barry is at the front of the queue.Barry is removed from the front of the queue.Jill is at the front of the queue.Jill is removed from the front of the queue.Nick is at the front of the queue.Nick is removed from the front of the queue.Ron is at the front of the queue.Ron is removed from the front of the queue.The queue should be empty: isEmpty() returns truemyQueue.getFront() returns nullmyQueue.dequeue() returns nullEnd of Queue TestisEmpty() returns trueSuccessfully added 1Successfully added 2Successfully added 4Successfully added 8Successfully added 16Successfully added 32Successfully added 64Successfully added 128After enqueing, the queue has: 1 2 4 8 16 32 64 128The Queue size = 8isEmpty() returns falseTesting getFront and dequeue:1 is at the front of the queue.1 is removed from the front of the queue.2 is at the front of the queue.2 is removed from the front of the queue.4 is at the front of the queue.4 is removed from the front of the queue.8 is at the front of the queue.8 is removed from the front of the queue.16 is at the front of the queue.16 is removed from the front of the queue.32 is at the front of the queue.32 is removed from the front of the queue.64 is at the front of the queue.64 is removed from the front of the queue.128 is at the front of the queue.128 is removed from the front of the queue.The queue should be empty: isEmpty() returns truemyQueue.getFront() returns nullmyQueue.dequeue() returns nullEnd of Queue TestTesting Double Queue: 1.2 8.9Testing dequeuing Double Queue: 1.2Testing dequeuing Double Queue: 8.9Double Queue's size is 0Testing enqueuing Double Queue after emptying: trueDouble Queue now has: 3.4Double Queue's size is 1*/