/**   A class that implements the ADT queue by using a chain of nodes   that has both head and tail references.   @author Frank M. Carrano   @author Timothy M. Henry   @version 4.0   UPDATED by C. Lee-Klawender   NOTE: the LinkedQueue class includes the Node class as an inner class*/public class LinkedQueue<T> implements QueueInterface<T>{  private Node frontNode; // References node at front of queue  private Node backNode;  // References node at back of queue  private int count = 0;	public LinkedQueue()	{		frontNode = null;		backNode = null;		count = 0;	} // end default constructor	public boolean enqueue(T newEntry)	{		Node newNode = new Node(newEntry);	// create new ndoe		if(count == 0)						// if list was empty, front and backnode are set to new node		{			frontNode = newNode;			backNode = newNode;		}		else 								// else link the back node's next to new node, change backnode to newnode		{			backNode.setNextNode(newNode);			backNode = newNode;		}		++count;		return true;	} // end enqueue	public T peekFront()	{		if (isEmpty())			return null;		else            return frontNode.getData();	} // end getFront	public T dequeue()	{		T front = peekFront();		// Get data of front node    	if( count == 0 )			// if empty return null			return front;		else if (count == 1)		// if only one item, set frontnode and backnode to null, decrement count value		{			frontNode = null;			backNode = null;			--count;			return front;		} 		else 						// frontnodt is frontnode's next value, decrement count value		{			frontNode = frontNode.getNextNode();			--count;			return front;		}	} // end dequeue	public boolean isEmpty()	{		return count == 0;	} // end isEmpty    public int size()    {        return count;    }    // Method that returns a string of the elements in the queue    @Override    public String toString()    {    	String result = "";    	if(count == 0)		// if empty return empty string    		return result;    	else    	{	    		// Set a temp node to traverse through list    		Node temp = frontNode;    		do    		{    			// append to result string the string of result's data    			result = result + temp.getData().toString() + " ";    			// move to next node    			temp = temp.getNextNode();    		} while(temp != null);    	}    	return result;    }	private class Node	{		private T    data; // Entry in queue		private Node next; // Link to next node		private Node(T dataPortion)		{			data = dataPortion;			next = null;		} // end constructor		private Node(T dataPortion, Node linkPortion)		{			data = dataPortion;			next = linkPortion;		} // end constructor		private T getData()		{			return data;		} // end getData		private void setData(T newData)		{			data = newData;		} // end setData		private Node getNextNode()		{			return next;		} // end getNextNode		private void setNextNode(Node nextNode)		{			next = nextNode;		} // end setNextNode	} // end Node} // end Linkedqueue