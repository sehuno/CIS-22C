/**   A driver that demonstrates the concrete Queue classes.   @author Frank M. Carrano   @author Timothy M. Henry   @version 4.1   UPDATED by C. Lee-Klawender*/public class QueueDriver{	public static void main(String[] args)	{        System.out.println("Create a queue: ");		QueueInterface<String> myQueue = new ArrayQueue<>(); // get an instance of a Queue		testQueueOperations(myQueue);		System.out.println("\n\nDone.");	}  // end main	public static void testQueueOperations(QueueInterface<String> myQueue)	{		System.out.println("\n\nisEmpty() returns " + myQueue.isEmpty() + "\n");		System.out.println("Add to queue to get\n" +		                   "Joe Jess Jim Jill Jane Jerry\n");        String [] strArray = {"Jim", "Jess", "Jill", "Jane", "Joe", "Jack"};		for(  int i=0; i < strArray.length ; ++i )		{            if(myQueue.enqueue(strArray[i]))                System.out.println("Successfully added " + strArray[i]);            else                System.out.println("UNABLE to enqueue " + strArray[i]);		}		System.out.println("\nThe size of the queue is " + myQueue.size());		System.out.println("\nisEmpty() returns " + myQueue.isEmpty() + "\n");		System.out.println("\n\nTesting getFront and dequeue:\n");		while (!myQueue.isEmpty())		{			String front = myQueue.peekFront();			System.out.println(front + " is at the front of the queue.");			front = myQueue.dequeue();			System.out.println(front + " is removed from the front of the queue.\n");		} // end while		System.out.print("\nThe queue should be empty: ");		System.out.println("isEmpty() returns " + myQueue.isEmpty() + "\n\n"); 		System.out.println("myQueue.getFront() returns " +  myQueue.peekFront());		System.out.println("myQueue.dequeue() returns " +  myQueue.dequeue() + "\n");		System.out.println("\nEnd of Queue Test\n");	} // end testQueueOperations}  // end Driver/* OUTPUTCreate a queue:isEmpty() returns trueAdd to queue to getJoe Jess Jim Jill Jane JerrySuccessfully added JimSuccessfully added JessSuccessfully added JillSuccessfully added JaneSuccessfully added JoeUNABLE to enqueue JackThe size of the queue is 5isEmpty() returns falseTesting getFront and dequeue:Jim is at the front of the queue.Jim is removed from the front of the queue.Jess is at the front of the queue.Jess is removed from the front of the queue.Jill is at the front of the queue.Jill is removed from the front of the queue.Jane is at the front of the queue.Jane is removed from the front of the queue.Joe is at the front of the queue.Joe is removed from the front of the queue.The queue should be empty: isEmpty() returns truemyQueue.getFront() returns nullmyQueue.dequeue() returns nullEnd of Queue TestDone.*/